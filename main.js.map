{"version":3,"file":"main.js","mappings":"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","sources":["webpack://list-editor/./src/js/GamePlay.js","webpack://list-editor/./src/js/utils.js","webpack://list-editor/./src/js/Team.js","webpack://list-editor/./src/js/generators.js","webpack://list-editor/./src/js/Character.js","webpack://list-editor/./src/js/PositionedCharacter.js","webpack://list-editor/./src/js/GameState.js","webpack://list-editor/./src/js/cursors.js","webpack://list-editor/./src/js/characters/Bowman.js","webpack://list-editor/./src/js/characters/Daemon.js","webpack://list-editor/./src/js/characters/Magician.js","webpack://list-editor/./src/js/characters/Swordsman.js","webpack://list-editor/./src/js/characters/Undead.js","webpack://list-editor/./src/js/characters/Vampire.js","webpack://list-editor/./src/js/handlers.js","webpack://list-editor/./src/js/AiLogic.js","webpack://list-editor/./src/js/app.js","webpack://list-editor/./src/js/GameStateService.js","webpack://list-editor/./src/js/GameController.js"],"sourcesContent":["import { calcHealthLevel, calcTileType } from './utils';\n\nexport default class GamePlay {\n  constructor() {\n    this.boardSize = 8;\n    this.container = null;\n    this.boardEl = null;\n    this.cells = [];\n    this.selectedCell = null;\n    this.cellClickListeners = [];\n    this.cellEnterListeners = [];\n    this.cellLeaveListeners = [];\n    this.newGameListeners = [];\n    this.saveGameListeners = [];\n    this.loadGameListeners = [];\n  }\n\n  bindToDOM(container) {\n    if (!(container instanceof HTMLElement)) {\n      throw new Error('container is not HTMLElement');\n    }\n    this.container = container;\n  }\n\n  /**\n   * Draws boardEl with specific theme\n   *\n   * @param theme\n   */\n  drawUi(theme) {\n    this.checkBinding();\n\n    this.container.innerHTML = `\n      <div class=\"controls\">\n        <button data-id=\"action-restart\" class=\"btn\">New Game</button>\n        <button data-id=\"action-save\" class=\"btn\">Save Game</button>\n        <button data-id=\"action-load\" class=\"btn\">Load Game</button>\n      </div>\n      <div class=\"board-container\">\n        <div data-id=\"board\" class=\"board\"></div>\n      </div>\n    `;\n\n    this.newGameEl = this.container.querySelector('[data-id=action-restart]');\n    this.saveGameEl = this.container.querySelector('[data-id=action-save]');\n    this.loadGameEl = this.container.querySelector('[data-id=action-load]');\n\n    this.newGameEl.addEventListener('click', (event) => this.onNewGameClick(event));\n    this.saveGameEl.addEventListener('click', (event) => this.onSaveGameClick(event));\n    this.loadGameEl.addEventListener('click', (event) => this.onLoadGameClick(event));\n\n    this.boardEl = this.container.querySelector('[data-id=board]');\n\n    this.boardEl.classList.add(theme);\n    for (let i = 0; i < this.boardSize ** 2; i += 1) {\n      const cellEl = document.createElement('div');\n      cellEl.classList.add('cell', 'map-tile', `map-tile-${calcTileType(i, this.boardSize)}`);\n      cellEl.addEventListener('mouseenter', (event) => this.onCellEnter(event));\n      cellEl.addEventListener('mouseleave', (event) => this.onCellLeave(event));\n      cellEl.addEventListener('click', (event) => this.onCellClick(event));\n      this.boardEl.appendChild(cellEl);\n    }\n\n    this.cells = Array.from(this.boardEl.children);\n  }\n\n  /**\n   * Draws positions (with chars) on boardEl\n   *\n   * @param positions array of PositionedCharacter objects\n   */\n  redrawPositions(positions) {\n    for (const cell of this.cells) {\n      cell.innerHTML = '';\n    }\n\n    for (const position of positions) {\n      const cellEl = this.boardEl.children[position.position];\n      const charEl = document.createElement('div');\n      charEl.classList.add('character', position.character.type);\n\n      const healthEl = document.createElement('div');\n      healthEl.classList.add('health-level');\n\n      const healthIndicatorEl = document.createElement('div');\n      healthIndicatorEl.classList.add('health-level-indicator', `health-level-indicator-${calcHealthLevel(position.character.health)}`);\n      healthIndicatorEl.style.width = `${position.character.health}%`;\n      healthEl.appendChild(healthIndicatorEl);\n\n      charEl.appendChild(healthEl);\n      cellEl.appendChild(charEl);\n    }\n  }\n\n  /**\n   * Add listener to mouse enter for cell\n   *\n   * @param callback\n   */\n  addCellEnterListener(callback) {\n    this.cellEnterListeners.push(callback);\n  }\n\n  /**\n   * Add listener to mouse leave for cell\n   *\n   * @param callback\n   */\n  addCellLeaveListener(callback) {\n    this.cellLeaveListeners.push(callback);\n  }\n\n  /**\n   * Add listener to mouse click for cell\n   *\n   * @param callback\n   */\n  addCellClickListener(callback) {\n    this.cellClickListeners.push(callback);\n  }\n\n  /**\n   * Add listener to \"New Game\" button click\n   *\n   * @param callback\n   */\n  addNewGameListener(callback) {\n    this.newGameListeners.push(callback);\n  }\n\n  /**\n   * Add listener to \"Save Game\" button click\n   *\n   * @param callback\n   */\n  addSaveGameListener(callback) {\n    this.saveGameListeners.push(callback);\n  }\n\n  /**\n   * Add listener to \"Load Game\" button click\n   *\n   * @param callback\n   */\n  addLoadGameListener(callback) {\n    this.loadGameListeners.push(callback);\n  }\n\n  onCellEnter(event) {\n    event.preventDefault();\n    const index = this.cells.indexOf(event.currentTarget);\n    this.cellEnterListeners.forEach((o) => o.call(null, index));\n  }\n\n  onCellLeave(event) {\n    event.preventDefault();\n    const index = this.cells.indexOf(event.currentTarget);\n    this.cellLeaveListeners.forEach((o) => o.call(null, index));\n  }\n\n  onCellClick(event) {\n    const index = this.cells.indexOf(event.currentTarget);\n    this.cellClickListeners.forEach((o) => o.call(null, index));\n  }\n\n  onNewGameClick(event) {\n    // event.preventDefault();\n    this.newGameListeners.forEach((o) => o.call(null));\n  }\n\n  onSaveGameClick(event) {\n    event.preventDefault();\n    this.saveGameListeners.forEach((o) => o.call(null));\n  }\n\n  onLoadGameClick(event) {\n    event.preventDefault();\n    this.loadGameListeners.forEach((o) => o.call(null));\n  }\n\n  static showError(message) {\n    alert(message);\n  }\n\n  static showMessage(message) {\n    alert(message);\n  }\n\n  selectCell(index, color = 'yellow') {\n    this.deselectCell(index);\n    this.cells[index].classList.add('selected', `selected-${color}`);\n  }\n\n  deselectCell(index) {\n    const cell = this.cells[index];\n    cell.classList.remove(...Array.from(cell.classList)\n      .filter((o) => o.startsWith('selected')));\n  }\n\n  showCellTooltip(message, index) {\n    this.cells[index].title = message;\n  }\n\n  hideCellTooltip(index) {\n    this.cells[index].title = '';\n  }\n\n  showDamage(index, damage) {\n    return new Promise((resolve) => {\n      const cell = this.cells[index];\n      const damageEl = document.createElement('span');\n      damageEl.textContent = damage;\n      damageEl.classList.add('damage');\n      cell.appendChild(damageEl);\n\n      damageEl.addEventListener('animationend', () => {\n        cell.removeChild(damageEl);\n        resolve();\n      });\n    });\n  }\n\n  setCursor(cursor) {\n    this.boardEl.style.cursor = cursor;\n  }\n\n  checkBinding() {\n    if (this.container === null) {\n      throw new Error('GamePlay not bind to DOM');\n    }\n  }\n}\n","/**\n * @todo\n * @param index - индекс поля\n * @param boardSize - размер квадратного поля (в длину или ширину)\n * @returns строка - тип ячейки на поле:\n *\n * top-left\n * top-right\n * top\n * bottom-left\n * bottom-right\n * bottom\n * right\n * left\n * center\n *\n * @example\n * ```js\n * calcTileType(0, 8); // 'top-left'\n * calcTileType(1, 8); // 'top'\n * calcTileType(63, 8); // 'bottom-right'\n * calcTileType(7, 7); // 'left'\n * ```\n * */\nexport function calcTileType(index, boardSize) {\n  if (index >= boardSize ** 2 || index < 0) {\n    return 'invalid value';\n  }\n  if (index === 0) {\n    return 'top-left';\n  }\n  if (index === boardSize - 1) {\n    return 'top-right';\n  }\n  if (index === boardSize ** 2 - boardSize) {\n    return 'bottom-left';\n  }\n  if (index === boardSize ** 2 - 1) {\n    return 'bottom-right';\n  }\n  if (index % boardSize === 0) {\n    return 'left';\n  }\n  if ((index + 1) % boardSize === 0) {\n    return 'right';\n  }\n  if (index > 0 && index < boardSize) {\n    return 'top';\n  }\n  if (index < (boardSize) ** 2 - 1 && index > boardSize ** 2 - boardSize) {\n    return 'bottom';\n  }\n\n  return 'center';\n}\n\nexport function calcHealthLevel(health) {\n  if (health < 15) {\n    return 'critical';\n  }\n\n  if (health < 50) {\n    return 'normal';\n  }\n\n  return 'high';\n}\n","/**\n * Класс, представляющий персонажей команды\n *\n * @todo Самостоятельно продумайте хранение персонажей в классе\n * Например\n * @example\n * ```js\n * const characters = [new Swordsman(2), new Bowman(1)]\n * const team = new Team(characters);\n *\n * team.characters // [swordsman, bowman]\n * ```\n * */\nexport default class Team {\n  constructor(characters) {\n    this.characters = characters;\n  }\n\n  set characters(array) {\n    this._characters = array;\n  }\n\n  get characters() {\n    return this._characters;\n  }\n}\n","import Team from './Team';\n\n/**\n * Формирует экземпляр персонажа из массива allowedTypes со\n * случайным уровнем от 1 до maxLevel\n *\n * @param allowedTypes массив классов\n * @param maxLevel максимальный возможный уровень персонажа\n * @returns генератор, который при каждом вызове\n * возвращает новый экземпляр класса персонажа\n *\n */\nexport function* characterGenerator(allowedTypes, maxLevel) {\n  const index = Math.floor(Math.random() * allowedTypes.length);\n  const level = Math.floor(Math.random() * maxLevel + 1);\n  yield new (allowedTypes[index])(level);\n}\n\n/**\n * Формирует массив персонажей на основе characterGenerator\n * @param allowedTypes массив классов\n * @param maxLevel максимальный возможный уровень персонажа\n * @param characterCount количество персонажей, которое нужно сформировать\n * @returns экземпляр Team, хранящий экземп персонажей. Кол-во персонажей в команде - characterCount\n * */\nexport function generateTeam(allowedTypes, maxLevel, characterCount) {\n  const actualCharacters = [];\n  for (let i = 0; i < characterCount; i += 1) {\n    const playerGenerator = characterGenerator(allowedTypes, maxLevel);\n    const newChar = playerGenerator.next().value;\n    actualCharacters.push(newChar);\n  }\n  actualCharacters.forEach((char) => {\n    if (char.level > 1) {\n      char.levelUp(char.level);\n    }\n  });\n  return new Team(actualCharacters);\n}\n","/**\n * Базовый класс, от которого наследуются классы персонажей\n * @property level - уровень персонажа, от 1 до 4\n * @property attack - показатель атаки\n * @property defence - показатель защиты\n * @property health - здоровье персонажа\n * @property type - строка с одним из допустимых значений:\n * swordsman\n * bowman\n * magician\n * daemon\n * undead\n * vampire\n */\nexport default class Character {\n  constructor(level, type = 'generic') {\n    this.level = level;\n    this.attack = 0;\n    this.defence = 0;\n    this.health = 50;\n    this.type = type;\n    if (new.target === Character) {\n      throw new Error('Invalid action');\n    }\n    // TODO: выбросите исключение, если кто-то использует \"new Character()\"\n  }\n\n  levelUp(level = 1) {\n    for (let i = 1; i < level; i += 1) {\n      this.improveAttack();\n      this.improveDefence();\n      this.heal();\n    }\n  }\n\n  heal() {\n    this.health += 80;\n    if (this.health > 100) {\n      this.health = 100;\n    }\n  }\n\n  improveAttack() {\n    this.attack = Math.max(this.attack, Math.floor(this.attack * ((80 + this.health) / 100)));\n  }\n\n  improveDefence() {\n    this.defence = Math.max(this.defence, Math.floor(this.defence * ((80 + this.health) / 100)));\n  }\n}\n","import Character from './Character';\n\nexport default class PositionedCharacter {\n  constructor(character, position) {\n    if (!(character instanceof Character)) {\n      throw new Error('character must be instance of Character or its children');\n    }\n\n    if (typeof position !== 'number') {\n      throw new Error('position must be a number');\n    }\n\n    this.character = character;\n    this.position = position;\n  }\n}\n","// import themes from './themes';\n\nexport default class GameState {\n  constructor() {\n    this.themes = ['prairie', 'desert', 'arctic', 'mountain'];\n    this.count = 0;\n    this.chars = [];\n    this.theme = this.themes[this.count];\n  }\n\n  set chars(chars) {\n    this._chars = chars;\n  }\n\n  get chars() {\n    return this._chars;\n  }\n\n  set theme(theme) {\n    this._theme = theme;\n  }\n\n  get theme() {\n    return this._theme;\n  }\n\n  increaseLevel() {\n    this.count += 1;\n    if (this.count === this.themes.length) {\n      this.count = 0;\n    }\n    this.theme = this.themes[this.count];\n  }\n\n  // switchTurn() {\n  //   if (this.state.turn === true) {\n  //     this.state.turn = false;\n  //   } else {\n  //     this.state.turn = true;\n  //   }\n  //   // this.state.turn === true ? this.state.turn = false : this.state.turn = true;\n  // }\n\n  // static from(object) {\n  //   const state = {\n  //     theme: object.theme,\n  //     characters: object.characters,\n  //     turn: object.turn,\n  //   };\n  //   this.gamePlay.drawUi(object.theme);\n  //   this.gamePlay.redrawPositions(object.characters);\n  //   return null;\n  // }\n}\n","const cursors = {\n  auto: 'auto',\n  pointer: 'pointer',\n  crosshair: 'crosshair',\n  notallowed: 'not-allowed',\n};\n\nexport default cursors;\n","import Character from '../Character';\n\nexport default class Bowman extends Character {\n  constructor(level) {\n    super(level);\n    this.attack = 25;\n    this.defence = 25;\n    this.move = 2;\n    this.attackRange = 2;\n    this.health = 50;\n    this.type = 'bowman';\n  }\n}\n","import Character from '../Character';\n\nexport default class Daemon extends Character {\n  constructor(level) {\n    super(level);\n    this.attack = 10;\n    this.defence = 10;\n    this.move = 1;\n    this.attackRange = 4;\n    this.health = 50;\n    this.type = 'daemon';\n  }\n}\n","import Character from '../Character';\n\nexport default class Magician extends Character {\n  constructor(level) {\n    super(level);\n    this.attack = 10;\n    this.defence = 40;\n    this.move = 1;\n    this.attackRange = 4;\n    this.health = 50;\n    this.type = 'magician';\n  }\n}\n","import Character from '../Character';\n\nexport default class Swordsman extends Character {\n  constructor(level) {\n    super(level);\n    this.attack = 40;\n    this.defence = 10;\n    this.move = 4;\n    this.attackRange = 1;\n    this.health = 50;\n    this.type = 'swordsman';\n  }\n}\n","import Character from '../Character';\n\nexport default class Undead extends Character {\n  constructor(level) {\n    super(level);\n    this.attack = 40;\n    this.defence = 10;\n    this.move = 4;\n    this.attackRange = 1;\n    this.health = 50;\n    this.type = 'undead';\n  }\n}\n","import Character from '../Character';\n\nexport default class Vampire extends Character {\n  constructor(level) {\n    super(level);\n    this.attack = 25;\n    this.defence = 25;\n    this.move = 2;\n    this.attackRange = 2;\n    this.health = 50;\n    this.type = 'vampire';\n  }\n}\n","export function getStartingIndexes(boardSize) {\n  const indexesForAllies = [];\n  const indexesForEnemies = [];\n  let restIndexes = [];\n  for (let i = 0; i <= boardSize ** 2 - boardSize + 1; i += boardSize) {\n    indexesForAllies.push(i);\n  }\n  restIndexes = indexesForAllies.map((index) => index + 1);\n  indexesForAllies.push(...restIndexes);\n  restIndexes = indexesForAllies.map((index) => index + boardSize - 2);\n  indexesForEnemies.push(...restIndexes);\n  return { indexesForAllies, indexesForEnemies };\n}\n\nexport function calculateDeadCells(boardSize) {\n  const deadCells = {\n    left: [],\n    right: [],\n    top: [],\n    bottom: [],\n  };\n  let restIndexes = [];\n  for (let i = 0; i <= boardSize ** 2 - boardSize + 1; i += boardSize) {\n    deadCells.left.push(i);\n  }\n  restIndexes = deadCells.left.map((index) => index + boardSize - 1);\n  deadCells.right.push(...restIndexes);\n  for (let i = 0; i < boardSize; i += 1) {\n    deadCells.top.push(i);\n  }\n  for (let i = boardSize ** 2 - 1; i >= boardSize ** 2 - boardSize; i -= 1) {\n    deadCells.bottom.push(i);\n  }\n  return deadCells;\n}\n\nexport function calcCellsRange(obj) {\n  const arr = [];\n  const { boardSize, index, range } = obj;\n  const {\n    left, right, top, bottom,\n  } = calculateDeadCells(boardSize);\n  let tempIndex = index;\n\n  for (let i = 0; i < range; i += 1) {\n    tempIndex -= 1;\n    if (!right.includes(tempIndex)) {\n      arr.push(tempIndex);\n    } else {\n      break;\n    }\n  }\n  tempIndex = index;\n  for (let i = 0; i < range; i += 1) {\n    tempIndex += 1;\n    if (!left.includes(tempIndex)) {\n      arr.push(tempIndex);\n    } else {\n      break;\n    }\n  }\n  tempIndex = index;\n  for (let i = 0; i < range; i += 1) {\n    tempIndex -= boardSize;\n    if (!bottom.includes(tempIndex)) {\n      arr.push(tempIndex);\n    } else {\n      break;\n    }\n  }\n  tempIndex = index;\n  for (let i = 0; i < range; i += 1) {\n    tempIndex += boardSize;\n    if (!top.includes(tempIndex)) {\n      arr.push(tempIndex);\n    } else {\n      break;\n    }\n  }\n  tempIndex = index;\n  for (let i = 0; i < range; i += 1) {\n    tempIndex -= (boardSize + 1);\n    if (!bottom.includes(tempIndex) && !right.includes(tempIndex)) {\n      arr.push(tempIndex);\n    } else {\n      break;\n    }\n  }\n  tempIndex = index;\n  for (let i = 0; i < range; i += 1) {\n    tempIndex -= (boardSize - 1);\n    if (!bottom.includes(tempIndex) && !left.includes(tempIndex)) {\n      arr.push(tempIndex);\n    } else {\n      break;\n    }\n  }\n  tempIndex = index;\n  for (let i = 0; i < range; i += 1) {\n    tempIndex += (boardSize - 1);\n    if (!top.includes(tempIndex) && !right.includes(tempIndex)) {\n      arr.push(tempIndex);\n    } else {\n      break;\n    }\n  }\n  tempIndex = index;\n  for (let i = 0; i < range; i += 1) {\n    tempIndex += (boardSize + 1);\n    if (!top.includes(tempIndex) && !left.includes(tempIndex)) {\n      arr.push(tempIndex);\n    } else {\n      break;\n    }\n  }\n  const result = arr.filter((number) => number >= 0 && number < boardSize ** 2);\n  return result;\n}\n\nexport function findEnemyIndexes(positionedCharacters) {\n  const enemies = ['daemon', 'undead', 'vampire'];\n  const indexesWithEnemy = [];\n  positionedCharacters.forEach((char) => {\n    if (enemies.includes(char.character.type)) {\n      indexesWithEnemy.push(char.position);\n    }\n  });\n  return indexesWithEnemy;\n}\n","import { findEnemyIndexes, calcCellsRange } from './handlers';\n\nexport default class Ai {\n  constructor(gamePlay) {\n    this.gamePlay = gamePlay;\n  }\n\n  act(positionedCharacters) {\n    const allies = ['magician', 'bowman', 'swordsman'];\n    const indexes = findEnemyIndexes(positionedCharacters);\n    const tempIndex = Math.floor(Math.random() * indexes.length);\n    const activeEnemyIndex = indexes[tempIndex];\n    const activeEnemy = positionedCharacters.find((c) => c.position === activeEnemyIndex);\n    const { attackRange } = activeEnemy.character;\n    const attackData = {\n      boardSize: this.gamePlay.boardSize,\n      index: activeEnemyIndex,\n      range: attackRange,\n    };\n    const moveRange = activeEnemy.character.move;\n    const moveData = {\n      boardSize: this.gamePlay.boardSize,\n      index: activeEnemyIndex,\n      range: moveRange,\n    };\n\n    const possibleAttackRange = calcCellsRange(attackData);\n    const possibleMoveRange = calcCellsRange(moveData);\n\n    for (let i = 0; i < possibleAttackRange.length; i += 1) {\n      const ally = this.gamePlay.cells[possibleAttackRange[i]].querySelector('.character');\n\n      if (ally && allies.includes(ally.classList[1])) {\n        const allyIn = positionedCharacters.findIndex((c) => c.position === possibleAttackRange[i]);\n        const activeAlly = positionedCharacters[allyIn];\n        console.log(activeEnemy, activeAlly);\n        const { attack } = activeEnemy.character;\n        const { defence } = activeAlly.character;\n        const damage = Math.max((attack - defence), attack * 0.1);\n        this.gamePlay.showDamage(activeAlly.position, damage)\n          .then(() => {\n            activeAlly.character.health -= damage;\n            if (activeAlly.character.health <= 0) {\n              positionedCharacters.splice(allyIn, 1);\n            }\n            this.gamePlay.redrawPositions(positionedCharacters);\n          });\n        return positionedCharacters;\n      }\n    }\n\n    const newPosition = this.findProperMoveIndex(possibleMoveRange);\n    activeEnemy.position = possibleMoveRange[newPosition];\n\n    return positionedCharacters;\n  }\n\n  findProperMoveIndex(range) {\n    const newPositionIndex = Math.floor(Math.random() * range.length);\n    const newPosition = range[newPositionIndex];\n    if (this.gamePlay.cells[newPosition].querySelector('.character')) {\n      this.findProperMoveIndex(range);\n    }\n    return newPositionIndex;\n  }\n}\n","/**\n * Entry point of app: don't change this\n */\nimport GamePlay from './GamePlay';\nimport GameController from './GameController';\nimport GameStateService from './GameStateService';\n\nconst gamePlay = new GamePlay();\ngamePlay.bindToDOM(document.querySelector('#game-container'));\n\nconst stateService = new GameStateService(localStorage);\n\nconst gameCtrl = new GameController(gamePlay, stateService);\ngameCtrl.init();\n\n// don't write your code here\n","export default class GameStateService {\n  constructor(storage) {\n    this.storage = storage;\n  }\n\n  save(state) {\n    this.storage.setItem('state', JSON.stringify(state));\n  }\n\n  load() {\n    try {\n      return JSON.parse(this.storage.getItem('state'));\n    } catch (e) {\n      throw new Error('Invalid state');\n    }\n  }\n}\n","import { generateTeam } from './generators';\nimport PositionedCharacter from './PositionedCharacter';\nimport GameState from './GameState';\nimport cursors from './cursors';\nimport Bowman from './characters/Bowman';\nimport Daemon from './characters/Daemon';\nimport Magician from './characters/Magician';\nimport Swordsman from './characters/Swordsman';\nimport Undead from './characters/Undead';\nimport Vampire from './characters/Vampire';\nimport GamePlay from './GamePlay';\n// import GameStateService from './GameStateService';\nimport Ai from './AiLogic';\nimport { getStartingIndexes, calcCellsRange } from './handlers';\n\nexport default class GameController {\n  constructor(gamePlay, stateService) {\n    this.gameState = new GameState();\n    this.gamePlay = gamePlay;\n    this.stateService = stateService;\n    this.cursors = cursors;\n    this.selectedIndex = null;\n    this.ai = new Ai(this.gamePlay);\n  }\n\n  init() {\n    this.gamePlay.drawUi(this.gameState.theme);\n    const allies = generateTeam([Bowman, Magician, Swordsman], 2, 3);\n    const enemies = generateTeam([Daemon, Undead, Vampire], 2, 3);\n    this.positionedCharacters = [];\n    const { indexesForAllies: posForAl } = getStartingIndexes(this.gamePlay.boardSize);\n    const { indexesForEnemies: posForEn } = getStartingIndexes(this.gamePlay.boardSize);\n    for (let i = 0; i < allies.characters.length; i += 1) {\n      const index = Math.floor(Math.random() * (16 - i));\n      const index2 = Math.floor(Math.random() * (16 - i));\n      this.positionedCharacters\n        .push(new PositionedCharacter(allies.characters[i], posForAl[index]));\n      this.positionedCharacters\n        .push(new PositionedCharacter(enemies.characters[i], posForEn[index2]));\n      posForAl.splice(index, 1);\n      posForEn.splice(index2, 1);\n    }\n    this.gameState.chars = this.positionedCharacters;\n    this.gamePlay.redrawPositions(this.positionedCharacters);\n\n    this.showTooltip = this.showTooltip.bind(this);\n    this.onCellEnter = this.onCellEnter.bind(this);\n    this.hideTooltip = this.hideTooltip.bind(this);\n    this.onCellLeave = this.onCellLeave.bind(this);\n    this.chooseCharacter = this.chooseCharacter.bind(this);\n    this.moveCharacter = this.moveCharacter.bind(this);\n    this.attackHandler = this.attackHandler.bind(this);\n    this.startNewGame = this.startNewGame.bind(this);\n\n    this.gamePlay.addCellEnterListener(this.showTooltip);\n    this.gamePlay.addCellEnterListener(this.onCellEnter);\n\n    this.gamePlay.addCellLeaveListener(this.hideTooltip);\n    this.gamePlay.addCellLeaveListener(this.onCellLeave);\n\n    this.gamePlay.addCellClickListener(this.chooseCharacter);\n    this.gamePlay.addCellClickListener(this.moveCharacter);\n    this.gamePlay.addCellClickListener(this.attackHandler);\n\n    this.gamePlay.addNewGameListener(this.startNewGame);\n\n    // TODO: add event listeners to gamePlay events\n    // TODO: load saved stated from stateService\n  }\n\n  onCellEnter(index) {\n    const activeCell = this.gamePlay.cells[index];\n    const charInCell = activeCell.querySelector('.character');\n    const allies = ['magician', 'bowman', 'swordsman'];\n    const enemies = ['daemon', 'undead', 'vampire'];\n\n    if (charInCell) {\n      for (let i = 0; i < allies.length; i += 1) {\n        if (charInCell.classList.contains(allies[i])) {\n          this.gamePlay.setCursor(this.cursors.pointer);\n        }\n      }\n    }\n\n    if (!this.selectedIndex) return;\n\n    const selectedChar = this.positionedCharacters.find((c) => c.position === this.selectedIndex);\n    const moveRange = selectedChar.character.move;\n    const attack = selectedChar.character.attackRange;\n\n    const moveData = {\n      boardSize: this.gamePlay.boardSize,\n      index: this.selectedIndex,\n      range: moveRange,\n    };\n    const attackData = {\n      boardSize: this.gamePlay.boardSize,\n      index: this.selectedIndex,\n      range: attack,\n    };\n\n    const possibleMoves = calcCellsRange(moveData);\n    const possibleAttack = calcCellsRange(attackData);\n\n    for (const moveIndex of possibleMoves) {\n      if (index === moveIndex && !charInCell) {\n        this.gamePlay.selectCell(index, 'green');\n        this.gamePlay.setCursor(this.cursors.pointer);\n      }\n    }\n\n    for (const attackIndex of possibleAttack) {\n      if (index === attackIndex) {\n        const char = this.gamePlay.cells[index].querySelector('.character');\n        if (!char) return;\n        const typeOfChar = char.classList[1];\n        if (enemies.includes(typeOfChar)) {\n          this.gamePlay.selectCell(index, 'red');\n          this.gamePlay.setCursor(this.cursors.crosshair);\n        }\n      }\n    }\n  }\n\n  onCellLeave(index) {\n    const allies = ['magician', 'bowman', 'swordsman'];\n    this.gamePlay.setCursor(this.cursors.auto);\n    const char = this.gamePlay.cells[index].querySelector('.character');\n    if (char) {\n      const typeOfChar = char.classList[1];\n      if (allies.includes(typeOfChar)) return;\n    }\n    this.gamePlay.deselectCell(index);\n  }\n\n  chooseCharacter(index) {\n    const charInCell = this.gamePlay.cells[index].querySelector('.character');\n    const playerTypes = ['magician', 'bowman', 'swordsman'];\n    if (!charInCell) {\n      return;\n    }\n    let actualCharacterType;\n    for (const character of this.positionedCharacters) {\n      if (character.position === index) {\n        actualCharacterType = character.character.type;\n      }\n    }\n    for (let i = 0; i < playerTypes.length; i += 1) {\n      if (actualCharacterType === playerTypes[i]) {\n        if (this.selectedIndex) {\n          this.gamePlay.deselectCell(this.selectedIndex);\n        }\n        this.gamePlay.selectCell(index);\n        this.selectedIndex = index;\n        return;\n      }\n    }\n    if (!this.selectedIndex) {\n      GamePlay.showError('Choose a character from your team');\n    }\n  }\n\n  showTooltip(index) {\n    if (!this.gamePlay.cells[index].querySelector('.character')) {\n      return;\n    }\n    const message = this.getCharacterInfo(index);\n    this.gamePlay.showCellTooltip(message, index);\n  }\n\n  getCharacterInfo(index) {\n    let info;\n    for (const character of this.positionedCharacters) {\n      if (character.position === index) {\n        info = `🎖${character.character.level}⚔${character.character.attack}🛡${character.character.defence}❤${character.character.health}`;\n      }\n    }\n    return info;\n  }\n\n  hideTooltip(index) {\n    this.gamePlay.hideCellTooltip(index);\n  }\n\n  moveCharacter(index) {\n    if (!this.gamePlay.cells[index].classList.contains('selected-green')) return;\n    const activeChar = this.positionedCharacters.find((c) => c.position === this.selectedIndex);\n    this.gamePlay.deselectCell(this.selectedIndex);\n    activeChar.position = index;\n    this.selectedIndex = index;\n    this.gamePlay.selectCell(index);\n    this.gameState.chars = this.positionedCharacters;\n    this.gamePlay.redrawPositions(this.positionedCharacters);\n\n    const renewedPositions = this.ai.act(this.positionedCharacters);\n    this.positionedCharacters = renewedPositions;\n    this.gamePlay.redrawPositions(this.positionedCharacters);\n  }\n\n  attackHandler(index) {\n    if (!this.gamePlay.cells[index].classList.contains('selected-red')) return;\n    const enemies = ['daemon', 'undead', 'vampire'];\n    const char = this.gamePlay.cells[index].querySelector('.character');\n    if (!char) return;\n    const typeOfChar = char.classList[1];\n    if (!enemies.includes(typeOfChar)) return;\n    const attacker = this.positionedCharacters.find((c) => c.position === this.selectedIndex);\n    const { attack } = attacker.character;\n    const target = this.positionedCharacters.find((c) => c.position === index);\n    const targetInd = this.positionedCharacters.findIndex((c) => c.position === index);\n    const { defence } = target.character;\n    const damage = Math.max((attack - defence), attack * 0.1);\n    this.gamePlay.showDamage(index, damage)\n      .then(() => {\n        target.character.health -= damage;\n        if (target.character.health <= 0) {\n          this.positionedCharacters.splice(targetInd, 1);\n        }\n        this.gamePlay.redrawPositions(this.positionedCharacters);\n      });\n\n    if (this.checkIfWon) {\n      this.gameState.increaseLevel();\n      this.gamePlay.drawUi(this.gameState.theme);\n    }\n\n    const renewedPositions = this.ai.act(this.positionedCharacters);\n    if (this.checkIfLost()) {\n      console.log('You lost');\n    }\n    this.gamePlay.redrawPositions(this.positionedCharacters);\n  }\n\n  checkIfLost() {\n    const allies = ['magician', 'bowman', 'swordsman'];\n    for (const char of this.positionedCharacters) {\n      if (!allies.includes(char.character.type)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  checkIfWon() {\n    const enemies = ['daemon', 'undead', 'vampire'];\n    for (const char of this.positionedCharacters) {\n      if (!enemies.includes(char.character.type)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  startNewGame() {\n    this.gameState.count = 0;\n    this.init();\n  }\n\n  // saveGame() {\n  //   this.game\n  // }\n\n  // loadGame() {\n\n  // }\n}\n"],"names":["GamePlay","constructor","this","boardSize","container","boardEl","cells","selectedCell","cellClickListeners","cellEnterListeners","cellLeaveListeners","newGameListeners","saveGameListeners","loadGameListeners","bindToDOM","HTMLElement","Error","drawUi","theme","checkBinding","innerHTML","newGameEl","querySelector","saveGameEl","loadGameEl","addEventListener","event","onNewGameClick","onSaveGameClick","onLoadGameClick","classList","add","i","cellEl","document","createElement","index","onCellEnter","onCellLeave","onCellClick","appendChild","Array","from","children","redrawPositions","positions","cell","position","charEl","character","type","healthEl","healthIndicatorEl","health","style","width","addCellEnterListener","callback","push","addCellLeaveListener","addCellClickListener","addNewGameListener","addSaveGameListener","addLoadGameListener","preventDefault","indexOf","currentTarget","forEach","o","call","showError","message","alert","showMessage","selectCell","color","deselectCell","remove","filter","startsWith","showCellTooltip","title","hideCellTooltip","showDamage","damage","Promise","resolve","damageEl","textContent","removeChild","setCursor","cursor","Team","characters","array","_characters","characterGenerator","allowedTypes","maxLevel","Math","floor","random","length","level","generateTeam","characterCount","actualCharacters","newChar","next","value","char","levelUp","Character","attack","defence","improveAttack","improveDefence","heal","max","PositionedCharacter","GameState","themes","count","chars","_chars","_theme","increaseLevel","auto","pointer","crosshair","notallowed","Bowman","super","move","attackRange","Daemon","Magician","Swordsman","Undead","Vampire","getStartingIndexes","indexesForAllies","indexesForEnemies","restIndexes","map","calcCellsRange","obj","arr","range","left","right","top","bottom","deadCells","calculateDeadCells","tempIndex","includes","number","Ai","gamePlay","act","positionedCharacters","allies","indexes","enemies","indexesWithEnemy","findEnemyIndexes","activeEnemyIndex","activeEnemy","find","c","attackData","moveRange","moveData","possibleAttackRange","possibleMoveRange","ally","allyIn","findIndex","activeAlly","console","log","then","splice","newPosition","findProperMoveIndex","newPositionIndex","stateService","storage","save","state","setItem","JSON","stringify","load","parse","getItem","e","localStorage","gameCtrl","gameState","cursors","selectedIndex","ai","init","posForAl","posForEn","index2","showTooltip","bind","hideTooltip","chooseCharacter","moveCharacter","attackHandler","startNewGame","charInCell","contains","selectedChar","possibleMoves","possibleAttack","moveIndex","attackIndex","typeOfChar","playerTypes","actualCharacterType","getCharacterInfo","info","activeChar","renewedPositions","attacker","target","targetInd","checkIfWon","checkIfLost"],"sourceRoot":""}