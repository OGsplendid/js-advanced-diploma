{"version":3,"file":"main.js","mappings":"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","sources":["webpack://list-editor/./src/js/themes.js","webpack://list-editor/./src/js/Team.js","webpack://list-editor/./src/js/generators.js","webpack://list-editor/./src/js/Character.js","webpack://list-editor/./src/js/PositionedCharacter.js","webpack://list-editor/./src/js/app.js","webpack://list-editor/./src/js/GamePlay.js","webpack://list-editor/./src/js/utils.js","webpack://list-editor/./src/js/GameStateService.js","webpack://list-editor/./src/js/GameController.js"],"sourcesContent":["const themes = {\n  prairie: 'prairie',\n  desert: 'desert',\n  arctic: 'arctic',\n  mountain: 'mountain',\n};\n\nexport default themes;\n","/**\n * Класс, представляющий персонажей команды\n *\n * @todo Самостоятельно продумайте хранение персонажей в классе\n * Например\n * @example\n * ```js\n * const characters = [new Swordsman(2), new Bowman(1)]\n * const team = new Team(characters);\n *\n * team.characters // [swordsman, bowman]\n * ```\n * */\nexport default class Team {\n  constructor(characters) {\n    this.characters = characters;\n  }\n\n  get characters() {\n    return this.characters;\n  }\n}\n","import Team from './Team';\n\n/**\n * Формирует экземпляр персонажа из массива allowedTypes со\n * случайным уровнем от 1 до maxLevel\n *\n * @param allowedTypes массив классов\n * @param maxLevel максимальный возможный уровень персонажа\n * @returns генератор, который при каждом вызове\n * возвращает новый экземпляр класса персонажа\n *\n */\nexport function* characterGenerator(allowedTypes, maxLevel) {\n  const index = Math.floor(Math.random() * allowedTypes.length);\n  const level = Math.floor(Math.random() * maxLevel + 1);\n  yield new allowedTypes[index](level);\n}\n\n/**\n * Формирует массив персонажей на основе characterGenerator\n * @param allowedTypes массив классов\n * @param maxLevel максимальный возможный уровень персонажа\n * @param characterCount количество персонажей, которое нужно сформировать\n * @returns экземпляр Team, хранящий экземп персонажей. Кол-во персонажей в команде - characterCount\n * */\nexport function generateTeam(allowedTypes, maxLevel, characterCount) {\n  const actualCharacters = [];\n  for (let i = 0; i < characterCount; i += 1) {\n    const playerGenerator = characterGenerator(allowedTypes, maxLevel);\n    const newChar = playerGenerator.next().value;\n    actualCharacters.push(newChar);\n  }\n  return new Team(actualCharacters);\n}\n","/**\n * Базовый класс, от которого наследуются классы персонажей\n * @property level - уровень персонажа, от 1 до 4\n * @property attack - показатель атаки\n * @property defence - показатель защиты\n * @property health - здоровье персонажа\n * @property type - строка с одним из допустимых значений:\n * swordsman\n * bowman\n * magician\n * daemon\n * undead\n * vampire\n */\nexport default class Character {\n  constructor(level, type = 'generic') {\n    this.level = level;\n    this.attack = 0;\n    this.defence = 0;\n    this.health = 50;\n    this.type = type;\n    if (new.target === Character) {\n      throw new Error('Invalid action');\n    }\n    // TODO: выбросите исключение, если кто-то использует \"new Character()\"\n  }\n}\n","import Character from './Character';\n\nexport default class PositionedCharacter {\n  constructor(character, position) {\n    if (!(character instanceof Character)) {\n      throw new Error('character must be instance of Character or its children');\n    }\n\n    if (typeof position !== 'number') {\n      throw new Error('position must be a number');\n    }\n\n    this.character = character;\n    this.position = position;\n  }\n}\n","/**\n * Entry point of app: don't change this\n */\nimport GamePlay from './GamePlay';\nimport GameController from './GameController';\nimport GameStateService from './GameStateService';\n\nconst gamePlay = new GamePlay();\ngamePlay.bindToDOM(document.querySelector('#game-container'));\n\nconst stateService = new GameStateService(localStorage);\n\nconst gameCtrl = new GameController(gamePlay, stateService);\ngameCtrl.init();\n\n// don't write your code here\n","import { calcHealthLevel, calcTileType } from './utils';\n\nexport default class GamePlay {\n  constructor() {\n    this.boardSize = 8;\n    this.container = null;\n    this.boardEl = null;\n    this.cells = [];\n    this.cellClickListeners = [];\n    this.cellEnterListeners = [];\n    this.cellLeaveListeners = [];\n    this.newGameListeners = [];\n    this.saveGameListeners = [];\n    this.loadGameListeners = [];\n  }\n\n  bindToDOM(container) {\n    if (!(container instanceof HTMLElement)) {\n      throw new Error('container is not HTMLElement');\n    }\n    this.container = container;\n  }\n\n  /**\n   * Draws boardEl with specific theme\n   *\n   * @param theme\n   */\n  drawUi(theme) {\n    this.checkBinding();\n\n    this.container.innerHTML = `\n      <div class=\"controls\">\n        <button data-id=\"action-restart\" class=\"btn\">New Game</button>\n        <button data-id=\"action-save\" class=\"btn\">Save Game</button>\n        <button data-id=\"action-load\" class=\"btn\">Load Game</button>\n      </div>\n      <div class=\"board-container\">\n        <div data-id=\"board\" class=\"board\"></div>\n      </div>\n    `;\n\n    this.newGameEl = this.container.querySelector('[data-id=action-restart]');\n    this.saveGameEl = this.container.querySelector('[data-id=action-save]');\n    this.loadGameEl = this.container.querySelector('[data-id=action-load]');\n\n    this.newGameEl.addEventListener('click', (event) => this.onNewGameClick(event));\n    this.saveGameEl.addEventListener('click', (event) => this.onSaveGameClick(event));\n    this.loadGameEl.addEventListener('click', (event) => this.onLoadGameClick(event));\n\n    this.boardEl = this.container.querySelector('[data-id=board]');\n\n    this.boardEl.classList.add(theme);\n    for (let i = 0; i < this.boardSize ** 2; i += 1) {\n      const cellEl = document.createElement('div');\n      cellEl.classList.add('cell', 'map-tile', `map-tile-${calcTileType(i, this.boardSize)}`);\n      cellEl.addEventListener('mouseenter', (event) => this.onCellEnter(event));\n      cellEl.addEventListener('mouseleave', (event) => this.onCellLeave(event));\n      cellEl.addEventListener('click', (event) => this.onCellClick(event));\n      this.boardEl.appendChild(cellEl);\n    }\n\n    this.cells = Array.from(this.boardEl.children);\n  }\n\n  /**\n   * Draws positions (with chars) on boardEl\n   *\n   * @param positions array of PositionedCharacter objects\n   */\n  redrawPositions(positions) {\n    for (const cell of this.cells) {\n      cell.innerHTML = '';\n    }\n\n    for (const position of positions) {\n      const cellEl = this.boardEl.children[position.position];\n      const charEl = document.createElement('div');\n      charEl.classList.add('character', position.character.type);\n\n      const healthEl = document.createElement('div');\n      healthEl.classList.add('health-level');\n\n      const healthIndicatorEl = document.createElement('div');\n      healthIndicatorEl.classList.add('health-level-indicator', `health-level-indicator-${calcHealthLevel(position.character.health)}`);\n      healthIndicatorEl.style.width = `${position.character.health}%`;\n      healthEl.appendChild(healthIndicatorEl);\n\n      charEl.appendChild(healthEl);\n      cellEl.appendChild(charEl);\n    }\n  }\n\n  /**\n   * Add listener to mouse enter for cell\n   *\n   * @param callback\n   */\n  addCellEnterListener(callback) {\n    this.cellEnterListeners.push(callback);\n  }\n\n  /**\n   * Add listener to mouse leave for cell\n   *\n   * @param callback\n   */\n  addCellLeaveListener(callback) {\n    this.cellLeaveListeners.push(callback);\n  }\n\n  /**\n   * Add listener to mouse click for cell\n   *\n   * @param callback\n   */\n  addCellClickListener(callback) {\n    this.cellClickListeners.push(callback);\n  }\n\n  /**\n   * Add listener to \"New Game\" button click\n   *\n   * @param callback\n   */\n  addNewGameListener(callback) {\n    this.newGameListeners.push(callback);\n  }\n\n  /**\n   * Add listener to \"Save Game\" button click\n   *\n   * @param callback\n   */\n  addSaveGameListener(callback) {\n    this.saveGameListeners.push(callback);\n  }\n\n  /**\n   * Add listener to \"Load Game\" button click\n   *\n   * @param callback\n   */\n  addLoadGameListener(callback) {\n    this.loadGameListeners.push(callback);\n  }\n\n  onCellEnter(event) {\n    event.preventDefault();\n    const index = this.cells.indexOf(event.currentTarget);\n    this.cellEnterListeners.forEach((o) => o.call(null, index));\n  }\n\n  onCellLeave(event) {\n    event.preventDefault();\n    const index = this.cells.indexOf(event.currentTarget);\n    this.cellLeaveListeners.forEach((o) => o.call(null, index));\n  }\n\n  onCellClick(event) {\n    const index = this.cells.indexOf(event.currentTarget);\n    this.cellClickListeners.forEach((o) => o.call(null, index));\n  }\n\n  onNewGameClick(event) {\n    event.preventDefault();\n    this.newGameListeners.forEach((o) => o.call(null));\n  }\n\n  onSaveGameClick(event) {\n    event.preventDefault();\n    this.saveGameListeners.forEach((o) => o.call(null));\n  }\n\n  onLoadGameClick(event) {\n    event.preventDefault();\n    this.loadGameListeners.forEach((o) => o.call(null));\n  }\n\n  static showError(message) {\n    alert(message);\n  }\n\n  static showMessage(message) {\n    alert(message);\n  }\n\n  selectCell(index, color = 'yellow') {\n    this.deselectCell(index);\n    this.cells[index].classList.add('selected', `selected-${color}`);\n  }\n\n  deselectCell(index) {\n    const cell = this.cells[index];\n    cell.classList.remove(...Array.from(cell.classList)\n      .filter((o) => o.startsWith('selected')));\n  }\n\n  showCellTooltip(message, index) {\n    this.cells[index].title = message;\n  }\n\n  hideCellTooltip(index) {\n    this.cells[index].title = '';\n  }\n\n  showDamage(index, damage) {\n    return new Promise((resolve) => {\n      const cell = this.cells[index];\n      const damageEl = document.createElement('span');\n      damageEl.textContent = damage;\n      damageEl.classList.add('damage');\n      cell.appendChild(damageEl);\n\n      damageEl.addEventListener('animationend', () => {\n        cell.removeChild(damageEl);\n        resolve();\n      });\n    });\n  }\n\n  setCursor(cursor) {\n    this.boardEl.style.cursor = cursor;\n  }\n\n  checkBinding() {\n    if (this.container === null) {\n      throw new Error('GamePlay not bind to DOM');\n    }\n  }\n}\n","/**\n * @todo\n * @param index - индекс поля\n * @param boardSize - размер квадратного поля (в длину или ширину)\n * @returns строка - тип ячейки на поле:\n *\n * top-left\n * top-right\n * top\n * bottom-left\n * bottom-right\n * bottom\n * right\n * left\n * center\n *\n * @example\n * ```js\n * calcTileType(0, 8); // 'top-left'\n * calcTileType(1, 8); // 'top'\n * calcTileType(63, 8); // 'bottom-right'\n * calcTileType(7, 7); // 'left'\n * ```\n * */\nexport function calcTileType(index, boardSize) {\n  if (index >= boardSize ** 2 || index < 0) {\n    return 'invalid value';\n  }\n  if (index === 0) {\n    return 'top-left';\n  }\n  if (index === boardSize - 1) {\n    return 'top-right';\n  }\n  if (index === boardSize ** 2 - boardSize) {\n    return 'bottom-left';\n  }\n  if (index === boardSize ** 2 - 1) {\n    return 'bottom-right';\n  }\n  if (index % boardSize === 0) {\n    return 'left';\n  }\n  if ((index + 1) % boardSize === 0) {\n    return 'right';\n  }\n  if (index > 0 && index < boardSize) {\n    return 'top';\n  }\n  if (index < (boardSize) ** 2 - 1 && index > boardSize ** 2 - boardSize) {\n    return 'bottom';\n  }\n\n  return 'center';\n}\n\nexport function calcHealthLevel(health) {\n  if (health < 15) {\n    return 'critical';\n  }\n\n  if (health < 50) {\n    return 'normal';\n  }\n\n  return 'high';\n}\n","export default class GameStateService {\n  constructor(storage) {\n    this.storage = storage;\n  }\n\n  save(state) {\n    this.storage.setItem('state', JSON.stringify(state));\n  }\n\n  load() {\n    try {\n      return JSON.parse(this.storage.getItem('state'));\n    } catch (e) {\n      throw new Error('Invalid state');\n    }\n  }\n}\n","import themes from './themes';\nimport { generateTeam } from './generators';\nimport PositionedCharacter from './PositionedCharacter';\n\nexport default class GameController {\n  constructor(gamePlay, stateService) {\n    this.gamePlay = gamePlay;\n    this.stateService = stateService;\n  }\n\n  init() {\n    this.gamePlay.drawUi(themes.prairie);\n    const allies = generateTeam(['Bowman', 'Magician', 'Swordsman'], 2, 3);\n    const enemies = generateTeam(['Daemon', 'Undead', 'Vampire'], 2, 3);\n    const positionedAllies = [];\n    const positionedEnemies = [];\n    for (let i = 0; i < allies.length; i += 1) {\n      positionedAllies.push(new PositionedCharacter(allies[i]));\n      positionedEnemies.push(new PositionedCharacter(enemies[i]));\n    }\n    this.gamePlay.redrawPositions(positionedAllies);\n    this.gamePlay.redrawPositions(positionedEnemies);\n    // TODO: add event listeners to gamePlay events\n    // TODO: load saved stated from stateService\n  }\n\n  // onCellClick(index) {\n  //   // TODO: react to click\n  // }\n\n  // onCellEnter(index) {\n  //   // TODO: react to mouse enter\n  // }\n\n  // onCellLeave(index) {\n  //   // TODO: react to mouse leave\n  // }\n}\n"],"names":["Team","constructor","characters","this","characterGenerator","allowedTypes","maxLevel","index","Math","floor","random","length","level","generateTeam","characterCount","actualCharacters","i","newChar","next","value","push","Character","type","attack","defence","health","Error","PositionedCharacter","character","position","gamePlay","boardSize","container","boardEl","cells","cellClickListeners","cellEnterListeners","cellLeaveListeners","newGameListeners","saveGameListeners","loadGameListeners","bindToDOM","HTMLElement","drawUi","theme","checkBinding","innerHTML","newGameEl","querySelector","saveGameEl","loadGameEl","addEventListener","event","onNewGameClick","onSaveGameClick","onLoadGameClick","classList","add","cellEl","document","createElement","onCellEnter","onCellLeave","onCellClick","appendChild","Array","from","children","redrawPositions","positions","cell","charEl","healthEl","healthIndicatorEl","style","width","addCellEnterListener","callback","addCellLeaveListener","addCellClickListener","addNewGameListener","addSaveGameListener","addLoadGameListener","preventDefault","indexOf","currentTarget","forEach","o","call","showError","message","alert","showMessage","selectCell","color","deselectCell","remove","filter","startsWith","showCellTooltip","title","hideCellTooltip","showDamage","damage","Promise","resolve","damageEl","textContent","removeChild","setCursor","cursor","stateService","storage","save","state","setItem","JSON","stringify","load","parse","getItem","e","localStorage","gameCtrl","init","allies","enemies","positionedAllies","positionedEnemies"],"sourceRoot":""}