{"version":3,"file":"main.js","mappings":"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","sources":["webpack://list-editor/./src/js/GamePlay.js","webpack://list-editor/./src/js/utils.js","webpack://list-editor/./src/js/themes.js","webpack://list-editor/./src/js/Team.js","webpack://list-editor/./src/js/generators.js","webpack://list-editor/./src/js/Character.js","webpack://list-editor/./src/js/PositionedCharacter.js","webpack://list-editor/./src/js/cursors.js","webpack://list-editor/./src/js/characters/Bowman.js","webpack://list-editor/./src/js/characters/Daemon.js","webpack://list-editor/./src/js/characters/Magician.js","webpack://list-editor/./src/js/characters/Swordsman.js","webpack://list-editor/./src/js/characters/Undead.js","webpack://list-editor/./src/js/characters/Vampire.js","webpack://list-editor/./src/js/app.js","webpack://list-editor/./src/js/GameStateService.js","webpack://list-editor/./src/js/GameController.js"],"sourcesContent":["import { calcHealthLevel, calcTileType } from './utils';\n\nexport default class GamePlay {\n  constructor() {\n    this.boardSize = 8;\n    this.container = null;\n    this.boardEl = null;\n    this.cells = [];\n    this.cellClickListeners = [];\n    this.cellEnterListeners = [];\n    this.cellLeaveListeners = [];\n    this.newGameListeners = [];\n    this.saveGameListeners = [];\n    this.loadGameListeners = [];\n  }\n\n  bindToDOM(container) {\n    if (!(container instanceof HTMLElement)) {\n      throw new Error('container is not HTMLElement');\n    }\n    this.container = container;\n  }\n\n  /**\n   * Draws boardEl with specific theme\n   *\n   * @param theme\n   */\n  drawUi(theme) {\n    this.checkBinding();\n\n    this.container.innerHTML = `\n      <div class=\"controls\">\n        <button data-id=\"action-restart\" class=\"btn\">New Game</button>\n        <button data-id=\"action-save\" class=\"btn\">Save Game</button>\n        <button data-id=\"action-load\" class=\"btn\">Load Game</button>\n      </div>\n      <div class=\"board-container\">\n        <div data-id=\"board\" class=\"board\"></div>\n      </div>\n    `;\n\n    this.newGameEl = this.container.querySelector('[data-id=action-restart]');\n    this.saveGameEl = this.container.querySelector('[data-id=action-save]');\n    this.loadGameEl = this.container.querySelector('[data-id=action-load]');\n\n    this.newGameEl.addEventListener('click', (event) => this.onNewGameClick(event));\n    this.saveGameEl.addEventListener('click', (event) => this.onSaveGameClick(event));\n    this.loadGameEl.addEventListener('click', (event) => this.onLoadGameClick(event));\n\n    this.boardEl = this.container.querySelector('[data-id=board]');\n\n    this.boardEl.classList.add(theme);\n    for (let i = 0; i < this.boardSize ** 2; i += 1) {\n      const cellEl = document.createElement('div');\n      cellEl.classList.add('cell', 'map-tile', `map-tile-${calcTileType(i, this.boardSize)}`);\n      cellEl.addEventListener('mouseenter', (event) => this.onCellEnter(event));\n      cellEl.addEventListener('mouseleave', (event) => this.onCellLeave(event));\n      cellEl.addEventListener('click', (event) => this.onCellClick(event));\n      this.boardEl.appendChild(cellEl);\n    }\n\n    this.cells = Array.from(this.boardEl.children);\n  }\n\n  /**\n   * Draws positions (with chars) on boardEl\n   *\n   * @param positions array of PositionedCharacter objects\n   */\n  redrawPositions(positions) {\n    for (const cell of this.cells) {\n      cell.innerHTML = '';\n    }\n\n    for (const position of positions) {\n      const cellEl = this.boardEl.children[position.position];\n      const charEl = document.createElement('div');\n      charEl.classList.add('character', position.character.type);\n\n      const healthEl = document.createElement('div');\n      healthEl.classList.add('health-level');\n\n      const healthIndicatorEl = document.createElement('div');\n      healthIndicatorEl.classList.add('health-level-indicator', `health-level-indicator-${calcHealthLevel(position.character.health)}`);\n      healthIndicatorEl.style.width = `${position.character.health}%`;\n      healthEl.appendChild(healthIndicatorEl);\n\n      charEl.appendChild(healthEl);\n      cellEl.appendChild(charEl);\n    }\n  }\n\n  /**\n   * Add listener to mouse enter for cell\n   *\n   * @param callback\n   */\n  addCellEnterListener(callback) {\n    this.cellEnterListeners.push(callback);\n  }\n\n  /**\n   * Add listener to mouse leave for cell\n   *\n   * @param callback\n   */\n  addCellLeaveListener(callback) {\n    this.cellLeaveListeners.push(callback);\n  }\n\n  /**\n   * Add listener to mouse click for cell\n   *\n   * @param callback\n   */\n  addCellClickListener(callback) {\n    this.cellClickListeners.push(callback);\n  }\n\n  /**\n   * Add listener to \"New Game\" button click\n   *\n   * @param callback\n   */\n  addNewGameListener(callback) {\n    this.newGameListeners.push(callback);\n  }\n\n  /**\n   * Add listener to \"Save Game\" button click\n   *\n   * @param callback\n   */\n  addSaveGameListener(callback) {\n    this.saveGameListeners.push(callback);\n  }\n\n  /**\n   * Add listener to \"Load Game\" button click\n   *\n   * @param callback\n   */\n  addLoadGameListener(callback) {\n    this.loadGameListeners.push(callback);\n  }\n\n  onCellEnter(event) {\n    event.preventDefault();\n    const index = this.cells.indexOf(event.currentTarget);\n    this.cellEnterListeners.forEach((o) => o.call(null, index));\n  }\n\n  onCellLeave(event) {\n    event.preventDefault();\n    const index = this.cells.indexOf(event.currentTarget);\n    this.cellLeaveListeners.forEach((o) => o.call(null, index));\n  }\n\n  onCellClick(event) {\n    const index = this.cells.indexOf(event.currentTarget);\n    this.cellClickListeners.forEach((o) => o.call(null, index));\n  }\n\n  onNewGameClick(event) {\n    event.preventDefault();\n    this.newGameListeners.forEach((o) => o.call(null));\n  }\n\n  onSaveGameClick(event) {\n    event.preventDefault();\n    this.saveGameListeners.forEach((o) => o.call(null));\n  }\n\n  onLoadGameClick(event) {\n    event.preventDefault();\n    this.loadGameListeners.forEach((o) => o.call(null));\n  }\n\n  static showError(message) {\n    alert(message);\n  }\n\n  static showMessage(message) {\n    alert(message);\n  }\n\n  selectCell(index, color = 'yellow') {\n    this.deselectCell(index);\n    this.cells[index].classList.add('selected', `selected-${color}`);\n  }\n\n  deselectCell(index) {\n    this.cells.forEach((cell) => cell.classList.remove('selected'));\n    // const cell = this.cells[index];\n    // cell.classList.remove(...Array.from(cell.classList)\n    //   .filter((o) => o.startsWith('selected')));\n  }\n\n  showCellTooltip(message, index) {\n    this.cells[index].title = message;\n  }\n\n  hideCellTooltip(index) {\n    this.cells[index].title = '';\n  }\n\n  showDamage(index, damage) {\n    return new Promise((resolve) => {\n      const cell = this.cells[index];\n      const damageEl = document.createElement('span');\n      damageEl.textContent = damage;\n      damageEl.classList.add('damage');\n      cell.appendChild(damageEl);\n\n      damageEl.addEventListener('animationend', () => {\n        cell.removeChild(damageEl);\n        resolve();\n      });\n    });\n  }\n\n  setCursor(cursor) {\n    this.boardEl.style.cursor = cursor;\n  }\n\n  checkBinding() {\n    if (this.container === null) {\n      throw new Error('GamePlay not bind to DOM');\n    }\n  }\n}\n","/**\n * @todo\n * @param index - индекс поля\n * @param boardSize - размер квадратного поля (в длину или ширину)\n * @returns строка - тип ячейки на поле:\n *\n * top-left\n * top-right\n * top\n * bottom-left\n * bottom-right\n * bottom\n * right\n * left\n * center\n *\n * @example\n * ```js\n * calcTileType(0, 8); // 'top-left'\n * calcTileType(1, 8); // 'top'\n * calcTileType(63, 8); // 'bottom-right'\n * calcTileType(7, 7); // 'left'\n * ```\n * */\nexport function calcTileType(index, boardSize) {\n  if (index >= boardSize ** 2 || index < 0) {\n    return 'invalid value';\n  }\n  if (index === 0) {\n    return 'top-left';\n  }\n  if (index === boardSize - 1) {\n    return 'top-right';\n  }\n  if (index === boardSize ** 2 - boardSize) {\n    return 'bottom-left';\n  }\n  if (index === boardSize ** 2 - 1) {\n    return 'bottom-right';\n  }\n  if (index % boardSize === 0) {\n    return 'left';\n  }\n  if ((index + 1) % boardSize === 0) {\n    return 'right';\n  }\n  if (index > 0 && index < boardSize) {\n    return 'top';\n  }\n  if (index < (boardSize) ** 2 - 1 && index > boardSize ** 2 - boardSize) {\n    return 'bottom';\n  }\n\n  return 'center';\n}\n\nexport function calcHealthLevel(health) {\n  if (health < 15) {\n    return 'critical';\n  }\n\n  if (health < 50) {\n    return 'normal';\n  }\n\n  return 'high';\n}\n","const themes = {\n  prairie: 'prairie',\n  desert: 'desert',\n  arctic: 'arctic',\n  mountain: 'mountain',\n};\n\nexport default themes;\n","/**\n * Класс, представляющий персонажей команды\n *\n * @todo Самостоятельно продумайте хранение персонажей в классе\n * Например\n * @example\n * ```js\n * const characters = [new Swordsman(2), new Bowman(1)]\n * const team = new Team(characters);\n *\n * team.characters // [swordsman, bowman]\n * ```\n * */\nexport default class Team {\n  constructor(characters) {\n    this.characters = characters;\n  }\n\n  set characters(array) {\n    this._characters = array;\n  }\n\n  get characters() {\n    return this._characters;\n  }\n}\n","import Team from './Team';\n\n/**\n * Формирует экземпляр персонажа из массива allowedTypes со\n * случайным уровнем от 1 до maxLevel\n *\n * @param allowedTypes массив классов\n * @param maxLevel максимальный возможный уровень персонажа\n * @returns генератор, который при каждом вызове\n * возвращает новый экземпляр класса персонажа\n *\n */\nexport function* characterGenerator(allowedTypes, maxLevel) {\n  const index = Math.floor(Math.random() * allowedTypes.length);\n  const level = Math.floor(Math.random() * maxLevel + 1);\n  yield new (allowedTypes[index])(level);\n}\n\n/**\n * Формирует массив персонажей на основе characterGenerator\n * @param allowedTypes массив классов\n * @param maxLevel максимальный возможный уровень персонажа\n * @param characterCount количество персонажей, которое нужно сформировать\n * @returns экземпляр Team, хранящий экземп персонажей. Кол-во персонажей в команде - characterCount\n * */\nexport function generateTeam(allowedTypes, maxLevel, characterCount) {\n  const actualCharacters = [];\n  for (let i = 0; i < characterCount; i += 1) {\n    const playerGenerator = characterGenerator(allowedTypes, maxLevel);\n    const newChar = playerGenerator.next().value;\n    actualCharacters.push(newChar);\n  }\n  return new Team(actualCharacters);\n}\n","/**\n * Базовый класс, от которого наследуются классы персонажей\n * @property level - уровень персонажа, от 1 до 4\n * @property attack - показатель атаки\n * @property defence - показатель защиты\n * @property health - здоровье персонажа\n * @property type - строка с одним из допустимых значений:\n * swordsman\n * bowman\n * magician\n * daemon\n * undead\n * vampire\n */\nexport default class Character {\n  constructor(level, type = 'generic') {\n    this.level = level;\n    this.attack = 0;\n    this.defence = 0;\n    this.health = 50;\n    this.type = type;\n    if (new.target === Character) {\n      throw new Error('Invalid action');\n    }\n    // TODO: выбросите исключение, если кто-то использует \"new Character()\"\n  }\n}\n","import Character from './Character';\n\nexport default class PositionedCharacter {\n  constructor(character, position) {\n    if (!(character instanceof Character)) {\n      throw new Error('character must be instance of Character or its children');\n    }\n\n    if (typeof position !== 'number') {\n      throw new Error('position must be a number');\n    }\n\n    this.character = character;\n    this.position = position;\n  }\n}\n","const cursors = {\n  auto: 'auto',\n  pointer: 'pointer',\n  crosshair: 'crosshair',\n  notallowed: 'not-allowed',\n};\n\nexport default cursors;\n","import Character from '../Character';\n\nexport default class Bowman extends Character {\n  constructor(level) {\n    super(level);\n    this.attack = 25;\n    this.defence = 25;\n    this.health = 50;\n    this.type = 'bowman';\n  }\n}\n","import Character from '../Character';\n\nexport default class Daemon extends Character {\n  constructor(level) {\n    super(level);\n    this.level = level;\n    this.attack = 10;\n    this.defence = 10;\n    this.health = 50;\n    this.type = 'daemon';\n  }\n}\n","import Character from '../Character';\n\nexport default class Magician extends Character {\n  constructor(level) {\n    super(level);\n    this.attack = 10;\n    this.defence = 40;\n    this.health = 50;\n    this.type = 'magician';\n  }\n}\n","import Character from '../Character';\n\nexport default class Swordsman extends Character {\n  constructor(level) {\n    super(level);\n    this.attack = 40;\n    this.defence = 10;\n    this.health = 50;\n    this.type = 'swordsman';\n  }\n}\n","import Character from '../Character';\n\nexport default class Undead extends Character {\n  constructor(level) {\n    super(level);\n    this.attack = 40;\n    this.defence = 10;\n    this.health = 50;\n    this.type = 'undead';\n  }\n}\n","import Character from '../Character';\n\nexport default class Vampire extends Character {\n  constructor(level) {\n    super(level);\n    this.attack = 25;\n    this.defence = 25;\n    this.health = 50;\n    this.type = 'vampire';\n  }\n}\n","/**\n * Entry point of app: don't change this\n */\nimport GamePlay from './GamePlay';\nimport GameController from './GameController';\nimport GameStateService from './GameStateService';\n\nconst gamePlay = new GamePlay();\ngamePlay.bindToDOM(document.querySelector('#game-container'));\n\nconst stateService = new GameStateService(localStorage);\n\nconst gameCtrl = new GameController(gamePlay, stateService);\ngameCtrl.init();\n\n// don't write your code here\n","export default class GameStateService {\n  constructor(storage) {\n    this.storage = storage;\n  }\n\n  save(state) {\n    this.storage.setItem('state', JSON.stringify(state));\n  }\n\n  load() {\n    try {\n      return JSON.parse(this.storage.getItem('state'));\n    } catch (e) {\n      throw new Error('Invalid state');\n    }\n  }\n}\n","import themes from './themes';\nimport { generateTeam } from './generators';\nimport PositionedCharacter from './PositionedCharacter';\nimport GameState from './GameState';\nimport cursors from './cursors';\nimport Bowman from './characters/Bowman';\nimport Daemon from './characters/Daemon';\nimport Magician from './characters/Magician';\nimport Swordsman from './characters/Swordsman';\nimport Undead from './characters/Undead';\nimport Vampire from './characters/Vampire';\nimport GamePlay from './GamePlay';\n\nexport default class GameController {\n  constructor(gamePlay, stateService) {\n    this.gamePlay = gamePlay;\n    this.stateService = stateService;\n    this.cursors = cursors;\n\n    // this.onCellEnter = this.onCellEnter.bind(this);\n  }\n\n  init() {\n    this.gamePlay.drawUi(themes.prairie);\n    const allies = generateTeam([Bowman, Magician, Swordsman], 2, 3);\n    const enemies = generateTeam([Daemon, Undead, Vampire], 2, 3);\n    this.positionedCharacters = [];\n    const posForAl = [0, 1, 8, 9, 16, 17, 24, 25, 32, 33, 40, 41, 48, 49, 56, 57];\n    const posForEn = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 62, 63];\n    for (let i = 0; i < allies.characters.length; i += 1) {\n      const index = Math.floor(Math.random() * (16 - i));\n      const index2 = Math.floor(Math.random() * (16 - i));\n      this.positionedCharacters\n        .push(new PositionedCharacter(allies.characters[i], posForAl[index]));\n      this.positionedCharacters\n        .push(new PositionedCharacter(enemies.characters[i], posForEn[index2]));\n      posForAl.splice(index, 1);\n      posForEn.splice(index2, 1);\n    }\n    this.gamePlay.redrawPositions(this.positionedCharacters);\n\n    this.onCellEnter = this.onCellEnter.bind(this);\n    this.onCellLeave = this.onCellLeave.bind(this);\n    this.onCellClick = this.onCellClick.bind(this);\n    this.onMouseOver = this.onMouseOver.bind(this);\n    // this.onMouseLeave = this.onMouseLeave.bind(this);\n\n    this.gamePlay.addCellEnterListener(this.onCellEnter);\n    this.gamePlay.addCellLeaveListener(this.onCellLeave);\n    this.gamePlay.addCellClickListener(this.onCellClick);\n    this.gamePlay.cells.forEach((cell) => cell.addEventListener('mouseover', this.onMouseOver));\n    // this.gamePlay.cells.forEach((cell) => cell.addEventListener('mouseover', this.onMouseLeave));\n    // TODO: add event listeners to gamePlay events\n    // TODO: load saved stated from stateService\n  }\n\n  // getAvailableIndexes(index) {\n  //   const left = \n  // }\n\n  onMouseOver(e) {\n    const allies = ['magician', 'bowman', 'swordsman'];\n    const enemies = ['daemon', 'undead', 'vampire'];\n    for (let i = 0; i < allies.length; i += 1) {\n      if (e.target.classList.contains(allies[i])) {\n        this.gamePlay.setCursor(this.cursors.pointer);\n      }\n    }\n    if (!e.target.classList.contains('character')) {\n      this.gamePlay.setCursor(this.cursors.auto);\n    }\n  }\n\n  onCellClick(index) {\n    const playerTypes = ['magician', 'bowman', 'swordsman'];\n    if (!this.gamePlay.cells[index].querySelector('.character')) {\n      return;\n    }\n    let actualCharacterType;\n    for (const character of this.positionedCharacters) {\n      if (character.position === index) {\n        actualCharacterType = character.character.type;\n      }\n    }\n    for (let i = 0; i < playerTypes.length; i += 1) {\n      if (actualCharacterType === playerTypes[i]) {\n        this.gamePlay.selectCell(index);\n        return;\n      }\n    }\n    GamePlay.showError('Choose a character from your team');\n  }\n\n  onCellEnter(index) {\n    if (!this.gamePlay.cells[index].querySelector('.character')) {\n      return;\n    }\n    const message = this.getCharacterInfo(index);\n    this.gamePlay.showCellTooltip(message, index);\n  }\n\n  getCharacterInfo(index) {\n    let info;\n    for (const character of this.positionedCharacters) {\n      if (character.position === index) {\n        info = `🎖${character.character.level}⚔${character.character.attack}🛡${character.character.defence}❤${character.character.health}`;\n      }\n    }\n    return info;\n  }\n\n  onCellLeave(index) {\n    this.gamePlay.hideCellTooltip(index);\n  }\n}\n"],"names":["GamePlay","constructor","this","boardSize","container","boardEl","cells","cellClickListeners","cellEnterListeners","cellLeaveListeners","newGameListeners","saveGameListeners","loadGameListeners","bindToDOM","HTMLElement","Error","drawUi","theme","checkBinding","innerHTML","newGameEl","querySelector","saveGameEl","loadGameEl","addEventListener","event","onNewGameClick","onSaveGameClick","onLoadGameClick","classList","add","i","cellEl","document","createElement","index","onCellEnter","onCellLeave","onCellClick","appendChild","Array","from","children","redrawPositions","positions","cell","position","charEl","character","type","healthEl","healthIndicatorEl","health","style","width","addCellEnterListener","callback","push","addCellLeaveListener","addCellClickListener","addNewGameListener","addSaveGameListener","addLoadGameListener","preventDefault","indexOf","currentTarget","forEach","o","call","showError","message","alert","showMessage","selectCell","color","deselectCell","remove","showCellTooltip","title","hideCellTooltip","showDamage","damage","Promise","resolve","damageEl","textContent","removeChild","setCursor","cursor","Team","characters","array","_characters","characterGenerator","allowedTypes","maxLevel","Math","floor","random","length","level","generateTeam","characterCount","actualCharacters","newChar","next","value","Character","attack","defence","PositionedCharacter","auto","pointer","crosshair","notallowed","Bowman","super","Daemon","Magician","Swordsman","Undead","Vampire","gamePlay","stateService","storage","save","state","setItem","JSON","stringify","load","parse","getItem","e","localStorage","gameCtrl","cursors","init","allies","enemies","positionedCharacters","posForAl","posForEn","index2","splice","bind","onMouseOver","target","contains","playerTypes","actualCharacterType","getCharacterInfo","info"],"sourceRoot":""}