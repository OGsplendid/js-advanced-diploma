!function(){"use strict";class e{constructor(){this.boardSize=8,this.container=null,this.boardEl=null,this.cells=[],this.selectedCell=null,this.cellClickListeners=[],this.cellEnterListeners=[],this.cellLeaveListeners=[],this.newGameListeners=[],this.saveGameListeners=[],this.loadGameListeners=[]}bindToDOM(e){if(!(e instanceof HTMLElement))throw new Error("container is not HTMLElement");this.container=e}drawUi(e){this.checkBinding(),this.container.innerHTML='\n      <div class="controls">\n        <button data-id="action-restart" class="btn">New Game</button>\n        <button data-id="action-save" class="btn">Save Game</button>\n        <button data-id="action-load" class="btn">Load Game</button>\n      </div>\n      <div class="board-container">\n        <div data-id="board" class="board"></div>\n      </div>\n    ',this.newGameEl=this.container.querySelector("[data-id=action-restart]"),this.saveGameEl=this.container.querySelector("[data-id=action-save]"),this.loadGameEl=this.container.querySelector("[data-id=action-load]"),this.newGameEl.addEventListener("click",(e=>this.onNewGameClick(e))),this.saveGameEl.addEventListener("click",(e=>this.onSaveGameClick(e))),this.loadGameEl.addEventListener("click",(e=>this.onLoadGameClick(e))),this.boardEl=this.container.querySelector("[data-id=board]"),this.boardEl.classList.add(e);for(let e=0;e<this.boardSize**2;e+=1){const a=document.createElement("div");a.classList.add("cell","map-tile","map-tile-"+((t=e)>=(s=this.boardSize)**2||t<0?"invalid value":0===t?"top-left":t===s-1?"top-right":t===s**2-s?"bottom-left":t===s**2-1?"bottom-right":t%s==0?"left":(t+1)%s==0?"right":t>0&&t<s?"top":t<s**2-1&&t>s**2-s?"bottom":"center")),a.addEventListener("mouseenter",(e=>this.onCellEnter(e))),a.addEventListener("mouseleave",(e=>this.onCellLeave(e))),a.addEventListener("click",(e=>this.onCellClick(e))),this.boardEl.appendChild(a)}var t,s;this.cells=Array.from(this.boardEl.children)}redrawPositions(e){for(const e of this.cells)e.innerHTML="";for(const s of e){const e=this.boardEl.children[s.position],a=document.createElement("div");a.classList.add("character",s.character.type);const i=document.createElement("div");i.classList.add("health-level");const r=document.createElement("div");r.classList.add("health-level-indicator","health-level-indicator-"+((t=s.character.health)<15?"critical":t<50?"normal":"high")),r.style.width=`${s.character.health}%`,i.appendChild(r),a.appendChild(i),e.appendChild(a)}var t}addCellEnterListener(e){this.cellEnterListeners.push(e)}addCellLeaveListener(e){this.cellLeaveListeners.push(e)}addCellClickListener(e){this.cellClickListeners.push(e)}addNewGameListener(e){this.newGameListeners.push(e)}addSaveGameListener(e){this.saveGameListeners.push(e)}addLoadGameListener(e){this.loadGameListeners.push(e)}onCellEnter(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellEnterListeners.forEach((e=>e.call(null,t)))}onCellLeave(e){e.preventDefault();const t=this.cells.indexOf(e.currentTarget);this.cellLeaveListeners.forEach((e=>e.call(null,t)))}onCellClick(e){const t=this.cells.indexOf(e.currentTarget);this.cellClickListeners.forEach((e=>e.call(null,t)))}onNewGameClick(e){this.newGameListeners.forEach((e=>e.call(null)))}onSaveGameClick(e){e.preventDefault(),this.saveGameListeners.forEach((e=>e.call(null)))}onLoadGameClick(e){e.preventDefault(),this.loadGameListeners.forEach((e=>e.call(null)))}static showError(e){alert(e)}static showMessage(e){alert(e)}selectCell(e,t="yellow"){this.deselectCell(e),this.cells[e].classList.add("selected",`selected-${t}`)}deselectCell(e){const t=this.cells[e];t.classList.remove(...Array.from(t.classList).filter((e=>e.startsWith("selected"))))}showCellTooltip(e,t){this.cells[t].title=e}hideCellTooltip(e){this.cells[e].title=""}showDamage(e,t){return new Promise((s=>{const a=this.cells[e],i=document.createElement("span");i.textContent=t,i.classList.add("damage"),a.appendChild(i),i.addEventListener("animationend",(()=>{a.removeChild(i),s()}))}))}setCursor(e){this.boardEl.style.cursor=e}checkBinding(){if(null===this.container)throw new Error("GamePlay not bind to DOM")}}class t{constructor(e){this.characters=e}set characters(e){this._characters=e}get characters(){return this._characters}}function*s(e,t){const s=Math.floor(Math.random()*e.length),a=Math.floor(Math.random()*t+1);yield new e[s](a)}function a(e,a,i){const r=[];for(let t=0;t<i;t+=1){const t=s(e,a).next().value;r.push(t)}return r.forEach((e=>{e.level>1&&e.levelUp(e.level)})),new t(r)}class i{constructor(e,t="generic"){if(this.level=e,this.attack=0,this.defence=0,this.health=50,this.type=t,new.target===i)throw new Error("Invalid action")}levelUp(e=1){for(let t=1;t<e;t+=1)this.improveAttack(),this.improveDefence(),this.heal()}heal(){this.health+=80,this.health>100&&(this.health=100)}improveAttack(){this.attack=Math.max(this.attack,Math.floor(this.attack*((80+this.health)/100)))}improveDefence(){this.defence=Math.max(this.defence,Math.floor(this.defence*((80+this.health)/100)))}}class r{constructor(e,t){if(!(e instanceof i))throw new Error("character must be instance of Character or its children");if("number"!=typeof t)throw new Error("position must be a number");this.character=e,this.position=t}}class n{constructor(){this.themes=["prairie","desert","arctic","mountain"],this.count=0,this.chars=[],this.theme=this.themes[this.count]}set chars(e){this._chars=e}get chars(){return this._chars}set theme(e){this._theme=e}get theme(){return this._theme}increaseLevel(){this.count+=1,this.count===this.themes.length&&(this.count=0),this.theme=this.themes[this.count]}}var o={auto:"auto",pointer:"pointer",crosshair:"crosshair",notallowed:"not-allowed"};class h extends i{constructor(e){super(e),this.attack=25,this.defence=25,this.move=2,this.attackRange=2,this.health=50,this.type="bowman"}}class l extends i{constructor(e){super(e),this.attack=10,this.defence=10,this.move=1,this.attackRange=4,this.health=50,this.type="daemon"}}class c extends i{constructor(e){super(e),this.attack=10,this.defence=40,this.move=1,this.attackRange=4,this.health=50,this.type="magician"}}class d extends i{constructor(e){super(e),this.attack=40,this.defence=10,this.move=4,this.attackRange=1,this.health=50,this.type="swordsman"}}class m extends i{constructor(e){super(e),this.attack=40,this.defence=10,this.move=4,this.attackRange=1,this.health=50,this.type="undead"}}class u extends i{constructor(e){super(e),this.attack=25,this.defence=25,this.move=2,this.attackRange=2,this.health=50,this.type="vampire"}}function p(e){const t=[],s=[];let a=[];for(let s=0;s<=e**2-e+1;s+=e)t.push(s);return a=t.map((e=>e+1)),t.push(...a),a=t.map((t=>t+e-2)),s.push(...a),{indexesForAllies:t,indexesForEnemies:s}}function f(e){const t=[],{boardSize:s,index:a,range:i}=e,{left:r,right:n,top:o,bottom:h}=function(e){const t={left:[],right:[],top:[],bottom:[]};let s=[];for(let s=0;s<=e**2-e+1;s+=e)t.left.push(s);s=t.left.map((t=>t+e-1)),t.right.push(...s);for(let s=0;s<e;s+=1)t.top.push(s);for(let s=e**2-1;s>=e**2-e;s-=1)t.bottom.push(s);return t}(s);let l=a;for(let e=0;e<i&&(l-=1,!n.includes(l));e+=1)t.push(l);l=a;for(let e=0;e<i&&(l+=1,!r.includes(l));e+=1)t.push(l);l=a;for(let e=0;e<i&&(l-=s,!h.includes(l));e+=1)t.push(l);l=a;for(let e=0;e<i&&(l+=s,!o.includes(l));e+=1)t.push(l);l=a;for(let e=0;e<i&&(l-=s+1,!h.includes(l)&&!n.includes(l));e+=1)t.push(l);l=a;for(let e=0;e<i&&(l-=s-1,!h.includes(l)&&!r.includes(l));e+=1)t.push(l);l=a;for(let e=0;e<i&&(l+=s-1,!o.includes(l)&&!n.includes(l));e+=1)t.push(l);l=a;for(let e=0;e<i&&(l+=s+1,!o.includes(l)&&!r.includes(l));e+=1)t.push(l);return t.filter((e=>e>=0&&e<s**2))}class g{constructor(e){this.gamePlay=e}act(e){const t=["magician","bowman","swordsman"],s=function(e){const t=["daemon","undead","vampire"],s=[];return e.forEach((e=>{t.includes(e.character.type)&&s.push(e.position)})),s}(e),a=s[Math.floor(Math.random()*s.length)],i=e.find((e=>e.position===a)),{attackRange:r}=i.character,n={boardSize:this.gamePlay.boardSize,index:a,range:r},o=i.character.move,h={boardSize:this.gamePlay.boardSize,index:a,range:o},l=f(n),c=f(h);for(let s=0;s<l.length;s+=1){const a=this.gamePlay.cells[l[s]].querySelector(".character");if(a&&t.includes(a.classList[1])){const t=e.findIndex((e=>e.position===l[s])),a=e[t];console.log(i,a);const{attack:r}=i.character,{defence:n}=a.character,o=Math.max(r-n,.1*r);return this.gamePlay.showDamage(a.position,o).then((()=>{a.character.health-=o,a.character.health<=0&&e.splice(t,1),this.gamePlay.redrawPositions(e)})),e}}const d=this.findProperMoveIndex(c);return i.position=c[d],e}findProperMoveIndex(e){const t=Math.floor(Math.random()*e.length),s=e[t];return this.gamePlay.cells[s].querySelector(".character")&&this.findProperMoveIndex(e),t}}const C=new e;C.bindToDOM(document.querySelector("#game-container"));const v=new class{constructor(e){this.storage=e}save(e){this.storage.setItem("state",JSON.stringify(e))}load(){try{return JSON.parse(this.storage.getItem("state"))}catch(e){throw new Error("Invalid state")}}}(localStorage),y=new class{constructor(e,t){this.gameState=new n,this.gamePlay=e,this.stateService=t,this.cursors=o,this.selectedIndex=null,this.ai=new g(this.gamePlay)}init(){this.gamePlay.drawUi(this.gameState.theme);const e=a([h,c,d],2,3),t=a([l,m,u],2,3);this.positionedCharacters=[];const{indexesForAllies:s}=p(this.gamePlay.boardSize),{indexesForEnemies:i}=p(this.gamePlay.boardSize);for(let a=0;a<e.characters.length;a+=1){const n=Math.floor(Math.random()*(16-a)),o=Math.floor(Math.random()*(16-a));this.positionedCharacters.push(new r(e.characters[a],s[n])),this.positionedCharacters.push(new r(t.characters[a],i[o])),s.splice(n,1),i.splice(o,1)}this.gameState.chars=this.positionedCharacters,this.gamePlay.redrawPositions(this.positionedCharacters),this.showTooltip=this.showTooltip.bind(this),this.onCellEnter=this.onCellEnter.bind(this),this.hideTooltip=this.hideTooltip.bind(this),this.onCellLeave=this.onCellLeave.bind(this),this.chooseCharacter=this.chooseCharacter.bind(this),this.moveCharacter=this.moveCharacter.bind(this),this.attackHandler=this.attackHandler.bind(this),this.startNewGame=this.startNewGame.bind(this),this.gamePlay.addCellEnterListener(this.showTooltip),this.gamePlay.addCellEnterListener(this.onCellEnter),this.gamePlay.addCellLeaveListener(this.hideTooltip),this.gamePlay.addCellLeaveListener(this.onCellLeave),this.gamePlay.addCellClickListener(this.chooseCharacter),this.gamePlay.addCellClickListener(this.moveCharacter),this.gamePlay.addCellClickListener(this.attackHandler),this.gamePlay.addNewGameListener(this.startNewGame)}onCellEnter(e){const t=this.gamePlay.cells[e].querySelector(".character"),s=["magician","bowman","swordsman"],a=["daemon","undead","vampire"];if(t)for(let e=0;e<s.length;e+=1)t.classList.contains(s[e])&&this.gamePlay.setCursor(this.cursors.pointer);if(!this.selectedIndex)return;const i=this.positionedCharacters.find((e=>e.position===this.selectedIndex)),r=i.character.move,n=i.character.attackRange,o={boardSize:this.gamePlay.boardSize,index:this.selectedIndex,range:r},h={boardSize:this.gamePlay.boardSize,index:this.selectedIndex,range:n},l=f(o),c=f(h);for(const s of l)e!==s||t||(this.gamePlay.selectCell(e,"green"),this.gamePlay.setCursor(this.cursors.pointer));for(const t of c)if(e===t){const t=this.gamePlay.cells[e].querySelector(".character");if(!t)return;const s=t.classList[1];a.includes(s)&&(this.gamePlay.selectCell(e,"red"),this.gamePlay.setCursor(this.cursors.crosshair))}}onCellLeave(e){const t=["magician","bowman","swordsman"];this.gamePlay.setCursor(this.cursors.auto);const s=this.gamePlay.cells[e].querySelector(".character");if(s){const e=s.classList[1];if(t.includes(e))return}this.gamePlay.deselectCell(e)}chooseCharacter(t){const s=["magician","bowman","swordsman"];if(!this.gamePlay.cells[t].querySelector(".character"))return;let a;for(const e of this.positionedCharacters)e.position===t&&(a=e.character.type);for(let e=0;e<s.length;e+=1)if(a===s[e])return this.selectedIndex&&this.gamePlay.deselectCell(this.selectedIndex),this.gamePlay.selectCell(t),void(this.selectedIndex=t);this.selectedIndex||e.showError("Choose a character from your team")}showTooltip(e){if(!this.gamePlay.cells[e].querySelector(".character"))return;const t=this.getCharacterInfo(e);this.gamePlay.showCellTooltip(t,e)}getCharacterInfo(e){let t;for(const s of this.positionedCharacters)s.position===e&&(t=`🎖${s.character.level}⚔${s.character.attack}🛡${s.character.defence}❤${s.character.health}`);return t}hideTooltip(e){this.gamePlay.hideCellTooltip(e)}moveCharacter(e){if(!this.gamePlay.cells[e].classList.contains("selected-green"))return;const t=this.positionedCharacters.find((e=>e.position===this.selectedIndex));this.gamePlay.deselectCell(this.selectedIndex),t.position=e,this.selectedIndex=e,this.gamePlay.selectCell(e),this.gameState.chars=this.positionedCharacters,this.gamePlay.redrawPositions(this.positionedCharacters);const s=this.ai.act(this.positionedCharacters);this.positionedCharacters=s,this.gamePlay.redrawPositions(this.positionedCharacters)}attackHandler(e){if(!this.gamePlay.cells[e].classList.contains("selected-red"))return;const t=this.gamePlay.cells[e].querySelector(".character");if(!t)return;const s=t.classList[1];if(!["daemon","undead","vampire"].includes(s))return;const a=this.positionedCharacters.find((e=>e.position===this.selectedIndex)),{attack:i}=a.character,r=this.positionedCharacters.find((t=>t.position===e)),n=this.positionedCharacters.findIndex((t=>t.position===e)),{defence:o}=r.character,h=Math.max(i-o,.1*i);this.gamePlay.showDamage(e,h).then((()=>{r.character.health-=h,r.character.health<=0&&this.positionedCharacters.splice(n,1),this.gamePlay.redrawPositions(this.positionedCharacters)})),this.checkIfWon&&(this.gameState.increaseLevel(),this.gamePlay.drawUi(this.gameState.theme)),this.ai.act(this.positionedCharacters),this.checkIfLost()&&console.log("You lost"),this.gamePlay.redrawPositions(this.positionedCharacters)}checkIfLost(){const e=["magician","bowman","swordsman"];for(const t of this.positionedCharacters)if(!e.includes(t.character.type))return!0;return!1}checkIfWon(){const e=["daemon","undead","vampire"];for(const t of this.positionedCharacters)if(!e.includes(t.character.type))return!0;return!1}startNewGame(){this.gameState.count=0,this.init()}}(C,v);y.init()}();
//# sourceMappingURL=main.js.map